
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3619 (open-tool-forge build) (git sha1 c403c984, gcc 9.3.0-17ubuntu1~20.04 -Os)


-- Parsing `rgb_mixer.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: rgb_mixer.v
Parsing Verilog input from `rgb_mixer.v' to AST representation.
Generating RTLIL representation for module `\rgb_mixer'.
Generating RTLIL representation for module `\clock_divider'.
Generating RTLIL representation for module `\debounce'.
Generating RTLIL representation for module `\encoder'.
Generating RTLIL representation for module `\pwm'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top rgb_mixer -json rgb_mixer.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     \pwm
Used module:     \encoder
Used module:     \debounce
Used module:     \clock_divider
Parameter \WIDTH = 8

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\pwm'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\pwm\WIDTH=8'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\pwm\WIDTH=8'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\pwm\WIDTH=8'.
Parameter \WIDTH = 8

2.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\encoder'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\encoder\WIDTH=8'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\encoder\WIDTH=8'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\encoder\WIDTH=8'.
Parameter \HIST_LEN = 8

2.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\debounce'.
Parameter \HIST_LEN = 8
Generating RTLIL representation for module `$paramod\debounce\HIST_LEN=8'.
Parameter \HIST_LEN = 8
Found cached RTLIL representation for module `$paramod\debounce\HIST_LEN=8'.
Parameter \HIST_LEN = 8
Found cached RTLIL representation for module `$paramod\debounce\HIST_LEN=8'.
Parameter \HIST_LEN = 8
Found cached RTLIL representation for module `$paramod\debounce\HIST_LEN=8'.
Parameter \HIST_LEN = 8
Found cached RTLIL representation for module `$paramod\debounce\HIST_LEN=8'.
Parameter \HIST_LEN = 8
Found cached RTLIL representation for module `$paramod\debounce\HIST_LEN=8'.

2.2.5. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     $paramod\pwm\WIDTH=8
Used module:     $paramod\encoder\WIDTH=8
Used module:     $paramod\debounce\HIST_LEN=8
Used module:     \clock_divider

2.2.6. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     $paramod\pwm\WIDTH=8
Used module:     $paramod\encoder\WIDTH=8
Used module:     $paramod\debounce\HIST_LEN=8
Used module:     \clock_divider
Removing unused module `\pwm'.
Removing unused module `\encoder'.
Removing unused module `\debounce'.
Removed 3 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1330$253 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1274$246 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1199$242 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1143$235 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1074$232 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1026$229 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:957$226 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:909$223 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:753$215 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:697$208 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:622$204 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:566$197 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:497$194 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:449$191 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:380$188 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:332$185 in module SB_DFFSR.
Marked 2 switch rules as full_case in process $proc$rgb_mixer.v:72$400 in module $paramod\debounce\HIST_LEN=8.
Marked 2 switch rules as full_case in process $proc$rgb_mixer.v:98$397 in module $paramod\encoder\WIDTH=8.
Marked 1 switch rules as full_case in process $proc$rgb_mixer.v:127$394 in module $paramod\pwm\WIDTH=8.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 25 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$256'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$252'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$245'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$241'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$234'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$231'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$228'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$225'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$220'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$218'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$214'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$207'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$203'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$196'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$193'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$190'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$187'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$182'.
  Set init value: \Q = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1330$253'.
Found async reset \R in `\SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1199$242'.
Found async reset \S in `\SB_DFFNS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1074$232'.
Found async reset \R in `\SB_DFFNR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:957$226'.
Found async reset \S in `\SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:753$215'.
Found async reset \R in `\SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:622$204'.
Found async reset \S in `\SB_DFFS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:497$194'.
Found async reset \R in `\SB_DFFR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:380$188'.

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$256'.
Creating decoders for process `\SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1330$253'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$252'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1274$246'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Creating decoders for process `\SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1199$242'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1143$235'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Creating decoders for process `\SB_DFFNS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1074$232'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$231'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1026$229'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$228'.
Creating decoders for process `\SB_DFFNR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:957$226'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$225'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:909$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:866$221'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$220'.
Creating decoders for process `\SB_DFFN.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:830$219'.
Creating decoders for process `\SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$218'.
Creating decoders for process `\SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:753$215'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$214'.
Creating decoders for process `\SB_DFFESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:697$208'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Creating decoders for process `\SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:622$204'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$203'.
Creating decoders for process `\SB_DFFESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:566$197'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Creating decoders for process `\SB_DFFS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:497$194'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$193'.
Creating decoders for process `\SB_DFFSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:449$191'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$190'.
Creating decoders for process `\SB_DFFR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:380$188'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$187'.
Creating decoders for process `\SB_DFFSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:332$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:289$183'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$182'.
Creating decoders for process `\SB_DFF.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:253$181'.
Creating decoders for process `$paramod\debounce\HIST_LEN=8.$proc$rgb_mixer.v:72$400'.
     1/2: $0\button_hist[7:0]
     2/2: $0\debounced[0:0]
Creating decoders for process `$paramod\encoder\WIDTH=8.$proc$rgb_mixer.v:98$397'.
     1/3: $0\old_b[0:0]
     2/3: $0\old_a[0:0]
     3/3: $0\value[7:0]
Creating decoders for process `$paramod\pwm\WIDTH=8.$proc$rgb_mixer.v:127$394'.
     1/1: $0\counter[7:0]
Creating decoders for process `\clock_divider.$proc$rgb_mixer.v:54$1'.

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1330$253'.
  created $adff cell `$procdff$474' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1274$246'.
  created $dff cell `$procdff$475' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1199$242'.
  created $adff cell `$procdff$476' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1143$235'.
  created $dff cell `$procdff$477' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1074$232'.
  created $adff cell `$procdff$478' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1026$229'.
  created $dff cell `$procdff$479' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:957$226'.
  created $adff cell `$procdff$480' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:909$223'.
  created $dff cell `$procdff$481' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:866$221'.
  created $dff cell `$procdff$482' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:830$219'.
  created $dff cell `$procdff$483' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:753$215'.
  created $adff cell `$procdff$484' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:697$208'.
  created $dff cell `$procdff$485' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:622$204'.
  created $adff cell `$procdff$486' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:566$197'.
  created $dff cell `$procdff$487' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:497$194'.
  created $adff cell `$procdff$488' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:449$191'.
  created $dff cell `$procdff$489' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:380$188'.
  created $adff cell `$procdff$490' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:332$185'.
  created $dff cell `$procdff$491' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:289$183'.
  created $dff cell `$procdff$492' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:253$181'.
  created $dff cell `$procdff$493' with positive edge clock.
Creating register for signal `$paramod\debounce\HIST_LEN=8.\debounced' using process `$paramod\debounce\HIST_LEN=8.$proc$rgb_mixer.v:72$400'.
  created $dff cell `$procdff$494' with positive edge clock.
Creating register for signal `$paramod\debounce\HIST_LEN=8.\button_hist' using process `$paramod\debounce\HIST_LEN=8.$proc$rgb_mixer.v:72$400'.
  created $dff cell `$procdff$495' with positive edge clock.
Creating register for signal `$paramod\encoder\WIDTH=8.\value' using process `$paramod\encoder\WIDTH=8.$proc$rgb_mixer.v:98$397'.
  created $dff cell `$procdff$496' with positive edge clock.
Creating register for signal `$paramod\encoder\WIDTH=8.\old_a' using process `$paramod\encoder\WIDTH=8.$proc$rgb_mixer.v:98$397'.
  created $dff cell `$procdff$497' with positive edge clock.
Creating register for signal `$paramod\encoder\WIDTH=8.\old_b' using process `$paramod\encoder\WIDTH=8.$proc$rgb_mixer.v:98$397'.
  created $dff cell `$procdff$498' with positive edge clock.
Creating register for signal `$paramod\pwm\WIDTH=8.\counter' using process `$paramod\pwm\WIDTH=8.$proc$rgb_mixer.v:127$394'.
  created $dff cell `$procdff$499' with positive edge clock.
Creating register for signal `\clock_divider.\clk_slow' using process `\clock_divider.$proc$rgb_mixer.v:54$1'.
  created $dff cell `$procdff$500' with positive edge clock.
Creating register for signal `\clock_divider.\counter' using process `\clock_divider.$proc$rgb_mixer.v:54$1'.
  created $dff cell `$procdff$501' with positive edge clock.
Creating register for signal `\clock_divider.\top_bit' using process `\clock_divider.$proc$rgb_mixer.v:54$1'.
  created $dff cell `$procdff$502' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$256'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1330$253'.
Removing empty process `SB_DFFNES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1330$253'.
Removing empty process `SB_DFFNESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$252'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1274$246'.
Removing empty process `SB_DFFNESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1274$246'.
Removing empty process `SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1199$242'.
Removing empty process `SB_DFFNER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1199$242'.
Removing empty process `SB_DFFNESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1143$235'.
Removing empty process `SB_DFFNESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1143$235'.
Removing empty process `SB_DFFNS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Removing empty process `SB_DFFNS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1074$232'.
Removing empty process `SB_DFFNSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$231'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1026$229'.
Removing empty process `SB_DFFNSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:1026$229'.
Removing empty process `SB_DFFNR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$228'.
Removing empty process `SB_DFFNR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:957$226'.
Removing empty process `SB_DFFNSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$225'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:909$223'.
Removing empty process `SB_DFFNSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:909$223'.
Removing empty process `SB_DFFNE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:866$221'.
Removing empty process `SB_DFFNE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:866$221'.
Removing empty process `SB_DFFN.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$220'.
Removing empty process `SB_DFFN.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:830$219'.
Removing empty process `SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$218'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:753$215'.
Removing empty process `SB_DFFES.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:753$215'.
Removing empty process `SB_DFFESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$214'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:697$208'.
Removing empty process `SB_DFFESS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:697$208'.
Removing empty process `SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:622$204'.
Removing empty process `SB_DFFER.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:622$204'.
Removing empty process `SB_DFFESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$203'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:566$197'.
Removing empty process `SB_DFFESR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:566$197'.
Removing empty process `SB_DFFS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Removing empty process `SB_DFFS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:497$194'.
Removing empty process `SB_DFFSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$193'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:449$191'.
Removing empty process `SB_DFFSS.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:449$191'.
Removing empty process `SB_DFFR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$190'.
Removing empty process `SB_DFFR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:380$188'.
Removing empty process `SB_DFFSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$187'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:332$185'.
Removing empty process `SB_DFFSR.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:332$185'.
Removing empty process `SB_DFFE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:289$183'.
Removing empty process `SB_DFFE.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:289$183'.
Removing empty process `SB_DFF.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:0$182'.
Removing empty process `SB_DFF.$proc$/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_sim.v:253$181'.
Found and cleaned up 3 empty switches in `$paramod\debounce\HIST_LEN=8.$proc$rgb_mixer.v:72$400'.
Removing empty process `$paramod\debounce\HIST_LEN=8.$proc$rgb_mixer.v:72$400'.
Found and cleaned up 2 empty switches in `$paramod\encoder\WIDTH=8.$proc$rgb_mixer.v:98$397'.
Removing empty process `$paramod\encoder\WIDTH=8.$proc$rgb_mixer.v:98$397'.
Found and cleaned up 1 empty switch in `$paramod\pwm\WIDTH=8.$proc$rgb_mixer.v:127$394'.
Removing empty process `$paramod\pwm\WIDTH=8.$proc$rgb_mixer.v:127$394'.
Removing empty process `clock_divider.$proc$rgb_mixer.v:54$1'.
Cleaned up 24 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\debounce\HIST_LEN=8.
Deleting now unused module $paramod\encoder\WIDTH=8.
Deleting now unused module $paramod\pwm\WIDTH=8.
Deleting now unused module clock_divider.
<suppressed ~13 debug messages>

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~6 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 69 unused wires.
<suppressed ~1 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module rgb_mixer..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.10.9. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\pwm2.$procdff$499 ($dff) from module rgb_mixer (D = $flatten\pwm2.$add$rgb_mixer.v:131$395_Y, Q = \pwm2.counter, rval = 8'00000000).
Adding SRST signal on $flatten\pwm1.$procdff$499 ($dff) from module rgb_mixer (D = $flatten\pwm1.$add$rgb_mixer.v:131$395_Y, Q = \pwm1.counter, rval = 8'00000000).
Adding SRST signal on $flatten\pwm0.$procdff$499 ($dff) from module rgb_mixer (D = $flatten\pwm0.$add$rgb_mixer.v:131$395_Y, Q = \pwm0.counter, rval = 8'00000000).
Adding SRST signal on $flatten\encoder2.$procdff$498 ($dff) from module rgb_mixer (D = \debounce2_b.debounced, Q = \encoder2.old_b, rval = 1'0).
Adding SRST signal on $flatten\encoder2.$procdff$497 ($dff) from module rgb_mixer (D = \debounce2_a.debounced, Q = \encoder2.old_a, rval = 1'0).
Adding SRST signal on $flatten\encoder2.$procdff$496 ($dff) from module rgb_mixer (D = $flatten\encoder2.$procmux$465_Y, Q = \encoder2.value, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$508 ($sdff) from module rgb_mixer (D = $flatten\encoder2.$procmux$465_Y, Q = \encoder2.value).
Adding SRST signal on $flatten\encoder1.$procdff$498 ($dff) from module rgb_mixer (D = \debounce1_b.debounced, Q = \encoder1.old_b, rval = 1'0).
Adding SRST signal on $flatten\encoder1.$procdff$497 ($dff) from module rgb_mixer (D = \debounce1_a.debounced, Q = \encoder1.old_a, rval = 1'0).
Adding SRST signal on $flatten\encoder1.$procdff$496 ($dff) from module rgb_mixer (D = $flatten\encoder1.$procmux$465_Y, Q = \encoder1.value, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$514 ($sdff) from module rgb_mixer (D = $flatten\encoder1.$procmux$465_Y, Q = \encoder1.value).
Adding SRST signal on $flatten\encoder0.$procdff$498 ($dff) from module rgb_mixer (D = \debounce0_b.debounced, Q = \encoder0.old_b, rval = 1'0).
Adding SRST signal on $flatten\encoder0.$procdff$497 ($dff) from module rgb_mixer (D = \debounce0_a.debounced, Q = \encoder0.old_a, rval = 1'0).
Adding SRST signal on $flatten\encoder0.$procdff$496 ($dff) from module rgb_mixer (D = $flatten\encoder0.$procmux$465_Y, Q = \encoder0.value, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$520 ($sdff) from module rgb_mixer (D = $flatten\encoder0.$procmux$465_Y, Q = \encoder0.value).
Adding SRST signal on $flatten\debounce2_b.$procdff$495 ($dff) from module rgb_mixer (D = { \debounce2_b.button_hist [6:0] \enc2_b }, Q = \debounce2_b.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce2_b.$procdff$494 ($dff) from module rgb_mixer (D = $flatten\debounce2_b.$procmux$453_Y, Q = \debounce2_b.debounced, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$525 ($sdff) from module rgb_mixer (D = $flatten\debounce2_b.$procmux$453_Y, Q = \debounce2_b.debounced).
Adding SRST signal on $flatten\debounce2_a.$procdff$495 ($dff) from module rgb_mixer (D = { \debounce2_a.button_hist [6:0] \enc2_a }, Q = \debounce2_a.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce2_a.$procdff$494 ($dff) from module rgb_mixer (D = $flatten\debounce2_a.$procmux$453_Y, Q = \debounce2_a.debounced, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$530 ($sdff) from module rgb_mixer (D = $flatten\debounce2_a.$procmux$453_Y, Q = \debounce2_a.debounced).
Adding SRST signal on $flatten\debounce1_b.$procdff$495 ($dff) from module rgb_mixer (D = { \debounce1_b.button_hist [6:0] \enc1_b }, Q = \debounce1_b.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce1_b.$procdff$494 ($dff) from module rgb_mixer (D = $flatten\debounce1_b.$procmux$453_Y, Q = \debounce1_b.debounced, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$535 ($sdff) from module rgb_mixer (D = $flatten\debounce1_b.$procmux$453_Y, Q = \debounce1_b.debounced).
Adding SRST signal on $flatten\debounce1_a.$procdff$495 ($dff) from module rgb_mixer (D = { \debounce1_a.button_hist [6:0] \enc1_a }, Q = \debounce1_a.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce1_a.$procdff$494 ($dff) from module rgb_mixer (D = $flatten\debounce1_a.$procmux$453_Y, Q = \debounce1_a.debounced, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$540 ($sdff) from module rgb_mixer (D = $flatten\debounce1_a.$procmux$453_Y, Q = \debounce1_a.debounced).
Adding SRST signal on $flatten\debounce0_b.$procdff$495 ($dff) from module rgb_mixer (D = { \debounce0_b.button_hist [6:0] \enc0_b }, Q = \debounce0_b.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce0_b.$procdff$494 ($dff) from module rgb_mixer (D = $flatten\debounce0_b.$procmux$453_Y, Q = \debounce0_b.debounced, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$545 ($sdff) from module rgb_mixer (D = $flatten\debounce0_b.$procmux$453_Y, Q = \debounce0_b.debounced).
Adding SRST signal on $flatten\debounce0_a.$procdff$495 ($dff) from module rgb_mixer (D = { \debounce0_a.button_hist [6:0] \enc0_a }, Q = \debounce0_a.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce0_a.$procdff$494 ($dff) from module rgb_mixer (D = $flatten\debounce0_a.$procmux$453_Y, Q = \debounce0_a.debounced, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$550 ($sdff) from module rgb_mixer (D = $flatten\debounce0_a.$procmux$453_Y, Q = \debounce0_a.debounced).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 24 unused cells and 24 unused wires.
<suppressed ~25 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~9 debug messages>

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.12.16. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed cell rgb_mixer.$flatten\debounce0_a.$procmux$450 ($mux).
Removed cell rgb_mixer.$flatten\debounce0_b.$procmux$450 ($mux).
Removed cell rgb_mixer.$flatten\debounce1_a.$procmux$450 ($mux).
Removed cell rgb_mixer.$flatten\debounce1_b.$procmux$450 ($mux).
Removed cell rgb_mixer.$flatten\debounce2_a.$procmux$450 ($mux).
Removed cell rgb_mixer.$flatten\debounce2_b.$procmux$450 ($mux).
Removed top 1 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder0.$procmux$467_CMP1 ($eq).
Removed top 2 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder0.$procmux$466_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder1.$procmux$467_CMP1 ($eq).
Removed top 2 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder1.$procmux$466_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder2.$procmux$467_CMP1 ($eq).
Removed top 2 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder2.$procmux$466_CMP0 ($eq).

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.16. Executing SHARE pass (SAT-based resource sharing).

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module rgb_mixer:
  creating $macc model for $flatten\clock_slow.$add$rgb_mixer.v:55$2 ($add).
  creating $macc model for $flatten\encoder0.$add$rgb_mixer.v:107$398 ($add).
  creating $macc model for $flatten\encoder0.$sub$rgb_mixer.v:108$399 ($sub).
  creating $macc model for $flatten\encoder1.$add$rgb_mixer.v:107$398 ($add).
  creating $macc model for $flatten\encoder1.$sub$rgb_mixer.v:108$399 ($sub).
  creating $macc model for $flatten\encoder2.$add$rgb_mixer.v:107$398 ($add).
  creating $macc model for $flatten\encoder2.$sub$rgb_mixer.v:108$399 ($sub).
  creating $macc model for $flatten\pwm0.$add$rgb_mixer.v:131$395 ($add).
  creating $macc model for $flatten\pwm1.$add$rgb_mixer.v:131$395 ($add).
  creating $macc model for $flatten\pwm2.$add$rgb_mixer.v:131$395 ($add).
  creating $alu model for $macc $flatten\pwm2.$add$rgb_mixer.v:131$395.
  creating $alu model for $macc $flatten\pwm1.$add$rgb_mixer.v:131$395.
  creating $alu model for $macc $flatten\pwm0.$add$rgb_mixer.v:131$395.
  creating $alu model for $macc $flatten\encoder2.$sub$rgb_mixer.v:108$399.
  creating $alu model for $macc $flatten\encoder2.$add$rgb_mixer.v:107$398.
  creating $alu model for $macc $flatten\encoder1.$sub$rgb_mixer.v:108$399.
  creating $alu model for $macc $flatten\encoder1.$add$rgb_mixer.v:107$398.
  creating $alu model for $macc $flatten\encoder0.$sub$rgb_mixer.v:108$399.
  creating $alu model for $macc $flatten\encoder0.$add$rgb_mixer.v:107$398.
  creating $alu model for $macc $flatten\clock_slow.$add$rgb_mixer.v:55$2.
  creating $alu model for $flatten\pwm0.$lt$rgb_mixer.v:125$393 ($lt): new $alu
  creating $alu model for $flatten\pwm1.$lt$rgb_mixer.v:125$393 ($lt): new $alu
  creating $alu model for $flatten\pwm2.$lt$rgb_mixer.v:125$393 ($lt): new $alu
  creating $alu cell for $flatten\pwm2.$lt$rgb_mixer.v:125$393: $auto$alumacc.cc:485:replace_alu$557
  creating $alu cell for $flatten\pwm1.$lt$rgb_mixer.v:125$393: $auto$alumacc.cc:485:replace_alu$568
  creating $alu cell for $flatten\pwm0.$lt$rgb_mixer.v:125$393: $auto$alumacc.cc:485:replace_alu$579
  creating $alu cell for $flatten\clock_slow.$add$rgb_mixer.v:55$2: $auto$alumacc.cc:485:replace_alu$590
  creating $alu cell for $flatten\encoder0.$add$rgb_mixer.v:107$398: $auto$alumacc.cc:485:replace_alu$593
  creating $alu cell for $flatten\encoder0.$sub$rgb_mixer.v:108$399: $auto$alumacc.cc:485:replace_alu$596
  creating $alu cell for $flatten\encoder1.$add$rgb_mixer.v:107$398: $auto$alumacc.cc:485:replace_alu$599
  creating $alu cell for $flatten\encoder1.$sub$rgb_mixer.v:108$399: $auto$alumacc.cc:485:replace_alu$602
  creating $alu cell for $flatten\encoder2.$add$rgb_mixer.v:107$398: $auto$alumacc.cc:485:replace_alu$605
  creating $alu cell for $flatten\encoder2.$sub$rgb_mixer.v:108$399: $auto$alumacc.cc:485:replace_alu$608
  creating $alu cell for $flatten\pwm0.$add$rgb_mixer.v:131$395: $auto$alumacc.cc:485:replace_alu$611
  creating $alu cell for $flatten\pwm1.$add$rgb_mixer.v:131$395: $auto$alumacc.cc:485:replace_alu$614
  creating $alu cell for $flatten\pwm2.$add$rgb_mixer.v:131$395: $auto$alumacc.cc:485:replace_alu$617
  created 13 $alu and 0 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.21.6. Executing OPT_DFF pass (perform DFF optimizations).

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.21.9. Rerunning OPT passes. (Maybe there is more to do..)

2.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

2.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.21.13. Executing OPT_DFF pass (perform DFF optimizations).

2.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.21.16. Finished OPT passes. (There is nothing left to do.)

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~9 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~286 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~304 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
<suppressed ~192 debug messages>
Removed a total of 64 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 32 unused cells and 296 unused wires.
<suppressed ~33 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$590.slice[0].carry: CO=\clock_slow.counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$593.slice[0].carry: CO=\encoder0.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$596.slice[0].carry: CO=\encoder0.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$599.slice[0].carry: CO=\encoder1.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$602.slice[0].carry: CO=\encoder1.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$605.slice[0].carry: CO=\encoder2.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$608.slice[0].carry: CO=\encoder2.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$611.slice[0].carry: CO=\pwm0.counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$614.slice[0].carry: CO=\pwm1.counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$617.slice[0].carry: CO=\pwm2.counter [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.33.4. Executing OPT_DFF pass (perform DFF optimizations).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.33.10. Executing OPT_DFF pass (perform DFF optimizations).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.33.12. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
No more expansions possible.
<suppressed ~140 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$590.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$593.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$596.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$599.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$602.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$605.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$608.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$611.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$614.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$617.slice[0].carry ($lut).

2.38. Executing ICE40_OPT pass (performing simple optimizations).

2.38.1. Running ICE40 specific optimizations.

2.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~137 debug messages>

2.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

2.38.4. Executing OPT_DFF pass (perform DFF optimizations).

2.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 671 unused wires.
<suppressed ~1 debug messages>

2.38.6. Rerunning OPT passes. (Removed registers in this run.)

2.38.7. Running ICE40 specific optimizations.

2.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~3 debug messages>

2.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.38.10. Executing OPT_DFF pass (perform DFF optimizations).

2.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.38.12. Rerunning OPT passes. (Removed registers in this run.)

2.38.13. Running ICE40 specific optimizations.

2.38.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

2.38.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

2.38.16. Executing OPT_DFF pass (perform DFF optimizations).

2.38.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

2.38.18. Finished OPT passes. (There is nothing left to do.)

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.40. Executing ABC pass (technology mapping using ABC).

2.40.1. Extracting gate netlist of module `\rgb_mixer' to `<abc-temp-dir>/input.blif'..
Extracted 334 gates and 490 wires to a netlist network with 155 inputs and 67 outputs.

2.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     103.
ABC: Participating nodes from both networks       =     210.
ABC: Participating nodes from the first network   =     102. (  89.47 % of nodes)
ABC: Participating nodes from the second network  =     108. (  94.74 % of nodes)
ABC: Node pairs (any polarity)                    =     102. (  89.47 % of names can be moved)
ABC: Node pairs (same polarity)                   =      79. (  69.30 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      113
ABC RESULTS:        internal signals:      268
ABC RESULTS:           input signals:      155
ABC RESULTS:          output signals:       67
Removing temp directory.

2.41. Executing ICE40_WRAPCARRY pass (wrap carries).

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 34 unused cells and 385 unused wires.

2.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      183
  1-LUT               28
  2-LUT               78
  3-LUT               26
  4-LUT               51

Eliminating LUTs.
Number of LUTs:      183
  1-LUT               28
  2-LUT               78
  3-LUT               26
  4-LUT               51

Combining LUTs.
Number of LUTs:      141
  1-LUT               28
  2-LUT               36
  3-LUT                8
  4-LUT               69

Eliminated 0 LUTs.
Combined 42 LUTs.
<suppressed ~1402 debug messages>

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/brandon/zerotoasic/fomu-toolchain-Linux/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001110000110110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001001101101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010010101011010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011111010010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
No more expansions possible.
<suppressed ~378 debug messages>
Removed 0 unused cells and 312 unused wires.

2.45. Executing AUTONAME pass.
Renamed 2266 objects in module rgb_mixer (14 iterations).
<suppressed ~424 debug messages>

2.46. Executing HIERARCHY pass (managing design hierarchy).

2.46.1. Analyzing design hierarchy..
Top module:  \rgb_mixer

2.46.2. Analyzing design hierarchy..
Top module:  \rgb_mixer
Removed 0 unused modules.

2.47. Printing statistics.

=== rgb_mixer ===

   Number of wires:                172
   Number of wire bits:            543
   Number of public wires:         172
   Number of public wire bits:     543
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                343
     SB_CARRY                       84
     SB_DFF                         10
     SB_DFFESR                      30
     SB_DFFSR                       78
     SB_LUT4                       141

2.48. Executing CHECK pass (checking for obvious problems).
checking module rgb_mixer..
found and reported 0 problems.

2.49. Executing JSON backend.

End of script. Logfile hash: 5085e41ff6, CPU: user 0.51s system 0.04s, MEM: 56.82 MB peak
Yosys 0.9+3619 (open-tool-forge build) (git sha1 c403c984, gcc 9.3.0-17ubuntu1~20.04 -Os)
Time spent: 22% 1x abc (0 sec), 18% 11x read_verilog (0 sec), ...
